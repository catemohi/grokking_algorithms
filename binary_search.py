"""
Решение задач на бинарный поиск для прорабокти первой главы книги.
===============================================================================
Задание 1

Сегодня утром жюри решило добавить в вариант олимпиады задачу. Ответственный
секретарь Оргкомитета напечатал ее условие в одном экземпляре, и теперь ему
нужно до начала олимпиады успеть сделать еще N копий.
В его распоряжении имеются два ксерокса, один из которых копирует лист 1
за секунд, а другой — за у.
(Разрешается использовать как один ксерокс, так и оба одновременно. Можно
копировать не только с оригинала, но и с копии.)
Помогите ему выяснить, какое минимальное время для этого потребуется.

Формат входных данных

Во входном файле записаны три натуральных числа N, x и у, разделенные пробелом
(1 < N < 2 * 10^8; x <= 1; 1 < у < 10).

Формат выходных данных

Выведите одно число — минимальное время в секундах,
необходимое для получения N копий.

===============================================================================
"""


def task_1(pagecopy: int, speed_first: int, speed_second: int) -> int:
    """
    Решение задачи 1. Нахождение минимального времени создания копий страницы.

    Args:
        pagecopy (int): количество страниц
        speed_first (int): скорость первого принтера
        speed_second (int): скорость второго принтера

    Returns:
        int: количество секунд потраченных на копирование
    """
    # Сортируем скорости по возрастанию
    if speed_first > speed_second:
        speed_first, speed_second = speed_second, speed_first
    # Обозначаем переменные времени работы
    min_time = 0
    max_time = (pagecopy - 1) * speed_second

    while min_time != max_time:
        moment_time = (min_time + max_time) / 2

        # Считаем количество копий в момент времени
        count_pagecopy = \
            moment_time / speed_first + moment_time / speed_second

        if count_pagecopy < (pagecopy - 1):
            min_time = moment_time + 1
        else:
            max_time = moment_time

    # Прибавление к итоговому времени печать первой страницы
    finally_time = round(max_time + speed_first, 0)

    return finally_time


if __name__ == "__main__":
    assert task_1(4, 1, 1), 'Задача 1 решена не верно! На выходе %s' \
        % task_1(4, 1, 1)
    assert task_1(5, 1, 2), 'Задача 1 решена не верно! На выходе %s' \
        % task_1(5, 1, 2)
